/*
 * Copyright (c) 2024 dingodb.com, Inc. All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax="proto2";

package curvefs.metaserver.quota;
option cc_generic_services = true;
option go_package = "curvefs/proto/quota";

enum QUOTA_OP_STATUS {
    QUOTA_OP_STATUS_OK = 0;
    QUOTA_OP_STATUS_FAILURE = 1;
    QUOTA_OP_STATUS_FS_NOTEXIST = 2;
    QUOTA_OP_STATUS_DIR_NOTEXIST = 3;
    // add any you want.
};

message Quota {
    required uint64 max_bytes = 1;
    required uint64 max_inodes = 2;
    required uint64 used_bytes = 3;
    required uint64 used_inodes = 4;
};

message Usage {
    required int64 bytes = 1;
    required int64 inodes = 2;
};

message SetFsQuotaRequest {
    required uint64 fs_id = 1;
    required Quota quota = 2;
};

message SetFsQuotaResponse {
    required QUOTA_OP_STATUS status = 1;
};

message GetFsQuotaRequest {
    required uint64 fs_id = 1;
};

message GetFsQuotaResponse {
    required QUOTA_OP_STATUS status = 1;
    required Quota quota = 2;
};

message FlushFsUsageRequest {
    required uint64 fs_id = 1;
    required Usage usage = 2;
};

message FlushFsUsageResponse {
    required QUOTA_OP_STATUS status = 1;
    required Quota quota = 2;
};

message SetDirQuotaRequest {
    required uint64 fs_id = 1;
    required uint64 dir_inode_id = 2;
    required Quota quota = 3;
};

message SetDirQuotaResponse {
    required QUOTA_OP_STATUS status = 1;
};

message GetDirQuotaRequest {
    required uint64 fs_id = 1;
    required uint64 dir_inode_id = 2;
};

message GetDirQuotaResponse {
    required QUOTA_OP_STATUS status = 1;
    required Quota quota = 2;
};

message DeleteDirQuotaRequest {
    required uint64 fs_id = 1;
    required uint64 dir_inode_id = 2;
};

message DeleteDirQuotaResponse {
    required QUOTA_OP_STATUS status = 1;
};

message LoadDirQuotasRequest {
    required uint64 fs_id = 1;
};

message LoadDirQuotasResponse {
    required QUOTA_OP_STATUS status = 1;
    map<uint64, Quota> quotas = 2;
};

message FlushDirUsagesRequest {
    map<uint64, Usage> usages = 1;
};

message FlushDirUsagesResponse {
    required QUOTA_OP_STATUS status = 1;
};

service QuotaService {
    rpc SetFsQuota(SetFsQuotaRequest) returns (SetFsQuotaResponse);
    rpc GetFsQuota(GetFsQuotaRequest) returns (GetFsQuotaResponse);
    rpc FlushFsUsage(FlushFsUsageRequest) returns (FlushFsUsageResponse);
    rpc SetDirQuota(SetDirQuotaRequest) returns (SetDirQuotaResponse);
    rpc GetDirQuota(GetDirQuotaRequest) returns (GetDirQuotaResponse);
    rpc DeleteDirQuota(DeleteDirQuotaRequest) returns (DeleteDirQuotaResponse);
    rpc LoadDirQuotas(LoadDirQuotasRequest) returns (LoadDirQuotasResponse);
    rpc FlushDirUsages(FlushDirUsagesRequest) returns (FlushDirUsagesResponse);
};
